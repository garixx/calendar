// Code generated by MockGen. DO NOT EDIT.
// Source: calendar/internals/models (interfaces: TokenUsecase)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "calendar/internals/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTokenUsecase is a mock of TokenUsecase interface.
type MockTokenUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockTokenUsecaseMockRecorder
}

// MockTokenUsecaseMockRecorder is the mock recorder for MockTokenUsecase.
type MockTokenUsecaseMockRecorder struct {
	mock *MockTokenUsecase
}

// NewMockTokenUsecase creates a new mock instance.
func NewMockTokenUsecase(ctrl *gomock.Controller) *MockTokenUsecase {
	mock := &MockTokenUsecase{ctrl: ctrl}
	mock.recorder = &MockTokenUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenUsecase) EXPECT() *MockTokenUsecaseMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockTokenUsecase) CreateToken(arg0 models.Token) (models.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", arg0)
	ret0, _ := ret[0].(models.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockTokenUsecaseMockRecorder) CreateToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockTokenUsecase)(nil).CreateToken), arg0)
}

// GetToken mocks base method.
func (m *MockTokenUsecase) GetToken(arg0 models.Token) (models.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", arg0)
	ret0, _ := ret[0].(models.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockTokenUsecaseMockRecorder) GetToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockTokenUsecase)(nil).GetToken), arg0)
}
